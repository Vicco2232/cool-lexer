
// line 1 "cool.rl"
import java_cup.runtime.Symbol;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import java.util.LinkedList;
import java.util.Arrays;


// line 233 "cool.rl"


class CoolLexer implements java_cup.runtime.Scanner {
    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();
    private int curr_lineno = 1;
    private AbstractSymbol filename;
    private BufferedReader reader;
    LinkedList<Symbol> tokens = new LinkedList<Symbol>();
    LinkedList<Integer> lineNumbers = new LinkedList<Integer>();

    CoolLexer(java.io.Reader reader) throws IOException {
        this();
        if (null == reader) {
            throw (new Error("Error: Bad input stream initializer."));
        }
        this.reader = new java.io.BufferedReader(reader);
        run_lexer();
    }

    CoolLexer(java.io.InputStream instream) throws IOException {
        this();
        if (null == instream) {
            throw (new Error("Error: Bad input stream initializer."));
        }
        this.reader = new BufferedReader(new InputStreamReader(instream));
        run_lexer();
    }

    private CoolLexer() {
        // Initialization code here
    }

    private void run_lexer() throws IOException {
        StringBuffer sb = new StringBuffer();
        int c;
        while ((c = this.reader.read()) != -1) {
            sb.append(Character.toChars(c));
        }
        char[] data = sb.toString().toCharArray();

        int p = 0;
        int pe = data.length;
        int eof = data.length;
        int ts = 0;
        int te = 0;
        int cs;
        int act;

        // ms and me means mark start and mark end respectively
        int ms = 0;
        int me = 0;

        
// line 72 "CoolLexer.java"
	{
	cs = cool_lexer_start;
	ts = -1;
	te = -1;
	act = 0;
	}

// line 290 "cool.rl"
        
// line 82 "CoolLexer.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
case 1:
	_acts = _cool_lexer_from_state_actions[cs];
	_nacts = (int) _cool_lexer_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _cool_lexer_actions[_acts++] ) {
	case 52:
// line 1 "NONE"
	{ts = p;}
	break;
// line 107 "CoolLexer.java"
		}
	}

	_match: do {
	_keys = _cool_lexer_key_offsets[cs];
	_trans = _cool_lexer_index_offsets[cs];
	_klen = _cool_lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _cool_lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _cool_lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _cool_lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _cool_lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _cool_lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _cool_lexer_indicies[_trans];
case 3:
	cs = _cool_lexer_trans_targs[_trans];

	if ( _cool_lexer_trans_actions[_trans] != 0 ) {
		_acts = _cool_lexer_trans_actions[_trans];
		_nacts = (int) _cool_lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _cool_lexer_actions[_acts++] )
			{
	case 0:
// line 14 "cool.rl"
	{ push_token(new Symbol(TokenConstants.CLASS)); }
	break;
	case 1:
// line 15 "cool.rl"
	{ push_token(new Symbol(TokenConstants.INHERITS)); }
	break;
	case 2:
// line 16 "cool.rl"
	{ push_token(new Symbol(TokenConstants.NEW)); }
	break;
	case 3:
// line 17 "cool.rl"
	{ push_token(new Symbol(TokenConstants.IF)); }
	break;
	case 4:
// line 18 "cool.rl"
	{ push_token(new Symbol(TokenConstants.THEN)); }
	break;
	case 5:
// line 19 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ELSE)); }
	break;
	case 6:
// line 20 "cool.rl"
	{ push_token(new Symbol(TokenConstants.FI)); }
	break;
	case 7:
// line 21 "cool.rl"
	{ push_token(new Symbol(TokenConstants.CASE)); }
	break;
	case 8:
// line 22 "cool.rl"
	{ push_token(new Symbol(TokenConstants.OF)); }
	break;
	case 9:
// line 23 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ESAC)); }
	break;
	case 10:
// line 24 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ISVOID)); }
	break;
	case 11:
// line 25 "cool.rl"
	{ push_token(new Symbol(TokenConstants.WHILE)); }
	break;
	case 12:
// line 26 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LOOP)); }
	break;
	case 13:
// line 27 "cool.rl"
	{ push_token(new Symbol(TokenConstants.POOL)); }
	break;
	case 14:
// line 30 "cool.rl"
	{
                        String token = get_token(data, ms, me);
                        AbstractSymbol sym = AbstractTable.idtable.addString(token);
                        push_token(new Symbol(TokenConstants.TYPEID, sym));
                    }
	break;
	case 15:
// line 35 "cool.rl"
	{
                        String token = get_token(data, ms, me);
                        AbstractSymbol sym = AbstractTable.idtable.addString(token);
                        push_token(new Symbol(TokenConstants.OBJECTID, sym));
                    }
	break;
	case 16:
// line 42 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ASSIGN)); }
	break;
	case 17:
// line 43 "cool.rl"
	{ push_token(new Symbol(TokenConstants.PLUS)); }
	break;
	case 18:
// line 44 "cool.rl"
	{ push_token(new Symbol(TokenConstants.MINUS)); }
	break;
	case 19:
// line 45 "cool.rl"
	{ push_token(new Symbol(TokenConstants.MULT)); }
	break;
	case 20:
// line 46 "cool.rl"
	{ push_token(new Symbol(TokenConstants.DIV)); }
	break;
	case 21:
// line 47 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LPAREN)); }
	break;
	case 22:
// line 48 "cool.rl"
	{ push_token(new Symbol(TokenConstants.RPAREN)); }
	break;
	case 23:
// line 49 "cool.rl"
	{ push_token(new Symbol(TokenConstants.NOT)); }
	break;
	case 24:
// line 50 "cool.rl"
	{ push_token(new Symbol(TokenConstants.EQ)); }
	break;
	case 25:
// line 51 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LT)); }
	break;
	case 26:
// line 52 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LE)); }
	break;
	case 27:
// line 53 "cool.rl"
	{ push_token(new Symbol(TokenConstants.NEG)); }
	break;
	case 28:
// line 54 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LBRACE)); }
	break;
	case 29:
// line 55 "cool.rl"
	{ push_token(new Symbol(TokenConstants.RBRACE)); }
	break;
	case 30:
// line 58 "cool.rl"
	{ push_token(new Symbol(TokenConstants.COLON)); }
	break;
	case 31:
// line 59 "cool.rl"
	{ push_token(new Symbol(TokenConstants.SEMI)); }
	break;
	case 32:
// line 60 "cool.rl"
	{ push_token(new Symbol(TokenConstants.DOT)); }
	break;
	case 33:
// line 61 "cool.rl"
	{ push_token(new Symbol(TokenConstants.COMMA)); }
	break;
	case 34:
// line 62 "cool.rl"
	{ push_token(new Symbol(TokenConstants.AT)); }
	break;
	case 35:
// line 65 "cool.rl"
	{
                      String token = get_token(data, ms, me);
                      Integer i = Integer.parseInt(token);
                      AbstractSymbol sym = AbstractTable.inttable.addInt(i);
                      push_token(new Symbol(TokenConstants.INT_CONST, sym));
                    }
	break;
	case 36:
// line 71 "cool.rl"
	{
                      String token = get_token(data, ts, te);
                      if (token == "true") {
                        push_token(new Symbol(TokenConstants.BOOL_CONST, true));
                      } else {
                        push_token(new Symbol(TokenConstants.BOOL_CONST, false));
                      }
                    }
	break;
	case 37:
// line 79 "cool.rl"
	{
                      // String token = get_token(data, ms, me);
                      String token = sb.toString();
                      AbstractSymbol sym = AbstractTable.stringtable.addString(token);
                      push_token(new Symbol(TokenConstants.STR_CONST, sym));
                    }
	break;
	case 38:
// line 87 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ERROR, "EOF in string constant")); }
	break;
	case 39:
// line 88 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ERROR, "Unmatched *)")); }
	break;
	case 40:
// line 96 "cool.rl"
	{ ms = me = p; }
	break;
	case 41:
// line 97 "cool.rl"
	{ me = p + 1; }
	break;
	case 42:
// line 101 "cool.rl"
	{ sb = new StringBuffer(); }
	break;
	case 43:
// line 102 "cool.rl"
	{ sb.append(get_token(data, ms, me)); }
	break;
	case 44:
// line 103 "cool.rl"
	{ sb.append('\b'); }
	break;
	case 45:
// line 104 "cool.rl"
	{ sb.append('\t'); }
	break;
	case 46:
// line 105 "cool.rl"
	{ sb.append('\n'); }
	break;
	case 47:
// line 106 "cool.rl"
	{ sb.append('\f'); }
	break;
	case 48:
// line 107 "cool.rl"
	{ sb.append('"'); }
	break;
	case 49:
// line 108 "cool.rl"
	{ sb.append(data[p]); }
	break;
	case 50:
// line 110 "cool.rl"
	{ this.curr_lineno += 1; }
	break;
	case 53:
// line 1 "NONE"
	{te = p+1;}
	break;
	case 54:
// line 230 "cool.rl"
	{te = p+1;}
	break;
	case 55:
// line 231 "cool.rl"
	{te = p+1;{ push_token(new Symbol(TokenConstants.ERROR, data[p])); }}
	break;
	case 56:
// line 230 "cool.rl"
	{te = p;p--;}
	break;
	case 57:
// line 231 "cool.rl"
	{te = p;p--;{ push_token(new Symbol(TokenConstants.ERROR, data[p])); }}
	break;
	case 58:
// line 230 "cool.rl"
	{{p = ((te))-1;}}
	break;
	case 59:
// line 231 "cool.rl"
	{{p = ((te))-1;}{ push_token(new Symbol(TokenConstants.ERROR, data[p])); }}
	break;
// line 428 "CoolLexer.java"
			}
		}
	}

case 2:
	_acts = _cool_lexer_to_state_actions[cs];
	_nacts = (int) _cool_lexer_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _cool_lexer_actions[_acts++] ) {
	case 51:
// line 1 "NONE"
	{ts = -1;}
	break;
// line 442 "CoolLexer.java"
		}
	}

	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	if ( _cool_lexer_eof_trans[cs] > 0 ) {
		_trans = _cool_lexer_eof_trans[cs] - 1;
		_goto_targ = 3;
		continue _goto;
	}
	}

case 5:
	}
	break; }
	}

// line 291 "cool.rl"
    }

    public Symbol next_token() {
        return this.tokens.poll();
    }

    void push_token(Symbol sym) {
        this.tokens.add(sym);
        this.lineNumbers.add(new Integer(this.curr_lineno));
    }

    public Integer next_lineno() {
        return this.lineNumbers.poll();
    }

    void set_filename(String fname) {
        filename = AbstractTable.stringtable.addString(fname);
    }

    String get_token(char[] data, int ts, int te) {
        char[] token = Arrays.copyOfRange(data, ts, te);
        return new String(token);
    }

    AbstractSymbol curr_filename() {
        return filename;
    }

    
// line 495 "CoolLexer.java"
private static byte[] init__cool_lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,   15,    1,   30,    1,   41,    1,
	   43,    1,   49,    1,   50,    1,   51,    1,   52,    1,   53,    1,
	   54,    1,   55,    1,   56,    1,   57,    1,   58,    1,   59,    2,
	    0,   15,    2,    3,   56,    2,    4,   56,    2,    5,   56,    2,
	    6,   56,    2,    7,   56,    2,    8,   56,    2,    9,   56,    2,
	   11,   56,    2,   12,   56,    2,   13,   56,    2,   14,   56,    2,
	   15,   56,    2,   16,   56,    2,   17,   56,    2,   18,   56,    2,
	   19,   56,    2,   20,   56,    2,   21,   56,    2,   22,   56,    2,
	   23,   56,    2,   24,   56,    2,   25,   56,    2,   26,   56,    2,
	   27,   56,    2,   28,   56,    2,   29,   56,    2,   30,   56,    2,
	   31,   56,    2,   32,   56,    2,   33,   56,    2,   34,   56,    2,
	   35,   56,    2,   36,   56,    2,   38,   56,    2,   39,   56,    2,
	   40,   41,    2,   40,   43,    2,   50,   56,    2,   53,   14,    2,
	   53,   41,    2,   53,   42,    3,   10,   15,   56,    3,   14,   15,
	   56,    3,   30,   40,   41,    3,   43,   37,   54,    3,   44,   40,
	   41,    3,   44,   40,   43,    3,   45,   40,   41,    3,   45,   40,
	   43,    3,   46,   40,   41,    3,   46,   40,   43,    3,   47,   40,
	   41,    3,   47,   40,   43,    3,   48,   40,   41,    3,   48,   40,
	   43,    3,   53,   40,   41,    4,   40,   43,   37,   54,    4,   50,
	   46,   40,   41,    4,   50,   46,   40,   43,    4,   53,    2,   40,
	   41,    4,   53,   30,   40,   41,    5,   44,   40,   43,   37,   54,
	    5,   45,   40,   43,   37,   54,    5,   46,   40,   43,   37,   54,
	    5,   47,   40,   43,   37,   54,    5,   48,   40,   43,   37,   54,
	    6,   50,   46,   40,   43,   37,   54
	};
}

private static final byte _cool_lexer_actions[] = init__cool_lexer_actions_0();


private static short[] init__cool_lexer_key_offsets_0()
{
	return new short [] {
	    0,    2,   10,   12,   17,   22,   24,   26,   28,   30,   32,   34,
	   36,   37,   41,   58,   75,   82,   90,  108,  118,  119,  120,  121,
	  122,  123,  124,  125,  128,  140,  151,  162,  169,  180,  191,  202,
	  214,  225,  236,  248,  259,  271,  279,  290,  301,  312,  323,  334,
	  345,  356,  367,  378,  389,  400,  412,  423,  434,  445,  457,  468,
	  479,  490,  501,  512,  524,  535,  546,  557,  568,  579,  590,  600,
	  617,  625,  632,  649,  687,  687,  689,  690,  692,  694,  697,  700,
	  700,  701,  701,  701,  701,  702,  703,  703,  703,  705,  705,  705,
	  707,  707,  707,  707,  707,  718,  725,  734,  742,  750,  758,  766,
	  774,  783,  791,  799,  808,  816,  825,  833,  841,  849,  857,  865,
	  873,  881,  889,  897,  905,  913,  922,  930,  938,  946,  955,  963,
	  971,  979,  987,  995, 1004, 1012, 1020, 1028, 1036, 1044, 1052, 1064,
	 1076, 1088, 1100, 1111, 1115, 1128, 1140, 1152, 1159, 1171, 1183, 1195,
	 1208, 1220, 1232, 1239, 1251, 1263, 1270, 1283, 1295, 1307, 1319, 1326,
	 1333, 1347, 1354, 1366, 1378, 1390, 1402, 1414, 1426, 1438, 1450, 1462,
	 1474, 1486, 1498, 1510, 1522, 1534, 1545, 1558, 1570, 1582, 1594, 1601,
	 1614, 1626, 1637, 1650, 1662, 1674, 1685, 1697, 1709, 1721, 1734, 1746,
	 1758, 1771, 1783, 1796, 1808, 1820, 1832, 1844, 1856, 1868, 1880, 1892,
	 1904, 1916, 1928, 1940, 1953, 1965, 1977, 1989, 2002, 2014, 2026, 2038,
	 2050, 2062, 2075, 2087, 2099, 2111, 2123, 2135, 2147, 2159, 2166, 2178,
	 2185, 2197, 2209, 2221, 2228, 2241, 2253, 2265, 2272, 2284, 2296, 2303,
	 2315, 2327, 2339, 2351, 2358, 2358, 2358
	};
}

private static final short _cool_lexer_key_offsets[] = init__cool_lexer_key_offsets_0();


private static char[] init__cool_lexer_trans_keys_0()
{
	return new char [] {
	   34,   92,    9,   10,   32,   34,   98,  102,  110,  116,   34,   92,
	    9,   10,   32,   34,   92,    9,   10,   32,   34,   92,   34,   92,
	   34,   92,   34,   92,   34,   92,   34,   92,   34,   92,   10,   42,
	   10,   32,   58,    9,   13,   32,   99,  101,  102,  105,  108,  110,
	  111,  112,  116,  119,    9,   13,   65,   90,   97,  122,   32,   99,
	  101,  102,  105,  108,  110,  111,  112,  116,  119,    9,   13,   65,
	   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,   95,  104,
	   48,   57,   65,   90,   97,  122,   32,   58,   99,  101,  102,  105,
	  108,  110,  111,  112,  116,  119,    9,   13,   65,   90,   97,  122,
	   32,   95,    9,   13,   48,   57,   65,   90,   97,  122,  110,  104,
	  101,  114,  105,  116,  115,   32,    9,   13,   32,   95,   97,  108,
	    9,   13,   48,   57,   65,   90,   98,  122,   32,   95,  115,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   95,  101,    9,   13,
	   48,   57,   65,   90,   97,  122,   95,   48,   57,   65,   90,   97,
	  122,   32,   95,   97,    9,   13,   48,   57,   65,   90,   98,  122,
	   32,   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,
	  108,  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,
	   97,    9,   13,   48,   57,   65,   90,   98,  122,   32,   95,   99,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,   97,  105,
	    9,   13,   48,   57,   65,   90,   98,  122,   32,   95,  108,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   95,  102,  110,    9,
	   13,   48,   57,   65,   90,   97,  122,   95,  104,   48,   57,   65,
	   90,   97,  122,   32,   95,  101,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   95,  114,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   95,  105,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   95,  116,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,
	  105,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  115,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  118,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   95,  111,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   95,  105,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   95,  100,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   95,  101,  111,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   95,  116,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   95,  111,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   95,  112,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   95,  101,  111,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   95,  119,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   95,  102,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   95,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,
	  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  108,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  104,  114,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  101,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   95,  110,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   95,  117,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   95,  104,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   95,  105,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   95,  108,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   95,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   99,  101,  102,  105,  108,  110,  111,  112,  116,  119,    9,
	   13,   65,   90,   97,  122,   95,  104,   48,   57,   65,   90,   97,
	  122,   95,   48,   57,   65,   90,   97,  122,   95,   99,  101,  102,
	  105,  108,  110,  111,  112,  116,  119,   48,   57,   65,   90,   97,
	  122,   10,   32,   34,   40,   41,   42,   43,   44,   45,   46,   47,
	   58,   59,   60,   61,   64,   67,   99,  101,  102,  105,  108,  110,
	  111,  112,  116,  119,  123,  125,  126,    9,   13,   48,   57,   65,
	   90,   97,  122,   34,   92,   42,   10,   42,   10,   42,   10,   41,
	   42,   10,   41,   42,   41,   45,   10,   48,   57,   45,   61,   32,
	   58,   95,    9,   13,   48,   57,   65,   90,   97,  122,   95,   48,
	   57,   65,   90,   97,  122,   95,   97,  108,   48,   57,   65,   90,
	   98,  122,   95,  115,   48,   57,   65,   90,   97,  122,   95,  101,
	   48,   57,   65,   90,   97,  122,   95,   97,   48,   57,   65,   90,
	   98,  122,   95,  115,   48,   57,   65,   90,   97,  122,   95,  115,
	   48,   57,   65,   90,   97,  122,   95,  108,  115,   48,   57,   65,
	   90,   97,  122,   95,   97,   48,   57,   65,   90,   98,  122,   95,
	   99,   48,   57,   65,   90,   97,  122,   95,   97,  105,   48,   57,
	   65,   90,   98,  122,   95,  108,   48,   57,   65,   90,   97,  122,
	   95,  102,  110,   48,   57,   65,   90,   97,  122,   95,  101,   48,
	   57,   65,   90,   97,  122,   95,  114,   48,   57,   65,   90,   97,
	  122,   95,  105,   48,   57,   65,   90,   97,  122,   95,  116,   48,
	   57,   65,   90,   97,  122,   95,  115,   48,   57,   65,   90,   97,
	  122,   95,  105,   48,   57,   65,   90,   97,  122,   95,  115,   48,
	   57,   65,   90,   97,  122,   95,  118,   48,   57,   65,   90,   97,
	  122,   95,  111,   48,   57,   65,   90,   97,  122,   95,  105,   48,
	   57,   65,   90,   97,  122,   95,  100,   48,   57,   65,   90,   97,
	  122,   95,  101,  111,   48,   57,   65,   90,   97,  122,   95,  116,
	   48,   57,   65,   90,   97,  122,   95,  111,   48,   57,   65,   90,
	   97,  122,   95,  112,   48,   57,   65,   90,   97,  122,   95,  101,
	  111,   48,   57,   65,   90,   97,  122,   95,  119,   48,   57,   65,
	   90,   97,  122,   95,  102,   48,   57,   65,   90,   97,  122,   95,
	  111,   48,   57,   65,   90,   97,  122,   95,  111,   48,   57,   65,
	   90,   97,  122,   95,  108,   48,   57,   65,   90,   97,  122,   95,
	  104,  114,   48,   57,   65,   90,   97,  122,   95,  101,   48,   57,
	   65,   90,   97,  122,   95,  110,   48,   57,   65,   90,   97,  122,
	   95,  117,   48,   57,   65,   90,   97,  122,   95,  104,   48,   57,
	   65,   90,   97,  122,   95,  105,   48,   57,   65,   90,   97,  122,
	   95,  108,   48,   57,   65,   90,   97,  122,   32,   58,   95,  108,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,   97,
	    9,   13,   48,   57,   65,   90,   98,  122,   32,   58,   95,  115,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  115,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,  105,    9,   13,   32,
	   58,   95,   97,  108,    9,   13,   48,   57,   65,   90,   98,  122,
	   32,   58,   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   58,   95,  101,    9,   13,   48,   57,   65,   90,   97,  122,
	   95,   48,   57,   65,   90,   97,  122,   32,   58,   95,   97,    9,
	   13,   48,   57,   65,   90,   98,  122,   32,   58,   95,  115,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  115,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  108,  115,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  115,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  101,
	    9,   13,   48,   57,   65,   90,   97,  122,   95,   48,   57,   65,
	   90,   97,  122,   32,   58,   95,   97,    9,   13,   48,   57,   65,
	   90,   98,  122,   32,   58,   95,   99,    9,   13,   48,   57,   65,
	   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,   97,  105,    9,   13,   48,   57,   65,   90,   98,  122,   32,
	   58,   95,  108,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  101,    9,   13,   48,   57,   65,   90,   97,  122,   95,
	   48,   57,   65,   90,   97,  122,   95,   48,   57,   65,   90,   97,
	  122,   32,   58,   95,  102,  110,  115,    9,   13,   48,   57,   65,
	   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  101,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  114,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  105,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  116,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  105,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  118,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  105,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  100,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  118,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  105,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  100,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	  101,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  116,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  112,    9,   13,   48,   57,   65,   90,   97,  122,   95,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  101,  111,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   58,   95,  119,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   58,   95,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,   97,  108,    9,   13,
	   48,   57,   65,   90,   98,  122,   32,   58,   95,  115,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   58,   95,  101,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   58,   95,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,   97,    9,   13,   48,
	   57,   65,   90,   98,  122,   32,   58,   95,  115,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  115,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  108,  115,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   58,   95,   97,    9,   13,
	   48,   57,   65,   90,   98,  122,   32,   58,   95,   99,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   58,   95,   97,  105,    9,
	   13,   48,   57,   65,   90,   98,  122,   32,   58,   95,  108,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  102,  110,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  104,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  101,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  114,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  105,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  116,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  115,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  105,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  115,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  118,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  111,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  105,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  100,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  101,
	  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	  116,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	  112,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	  101,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  119,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  102,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  108,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  104,  114,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  101,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  110,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  117,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  104,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  105,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  108,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  116,    9,   13,   48,   57,   65,   90,   97,  122,   95,
	   48,   57,   65,   90,   97,  122,   32,   58,   95,  102,    9,   13,
	   48,   57,   65,   90,   97,  122,   95,   48,   57,   65,   90,   97,
	  122,   32,   58,   95,  111,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   58,   95,  111,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   58,   95,  108,    9,   13,   48,   57,   65,   90,   97,
	  122,   95,   48,   57,   65,   90,   97,  122,   32,   58,   95,  104,
	  114,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	  101,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	  110,    9,   13,   48,   57,   65,   90,   97,  122,   95,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  117,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  101,    9,   13,   48,   57,
	   65,   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  104,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  105,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  108,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  101,    9,   13,   48,   57,   65,   90,   97,  122,   95,
	   48,   57,   65,   90,   97,  122,    0
	};
}

private static final char _cool_lexer_trans_keys[] = init__cool_lexer_trans_keys_0();


private static byte[] init__cool_lexer_single_lengths_0()
{
	return new byte [] {
	    2,    8,    2,    5,    5,    2,    2,    2,    2,    2,    2,    2,
	    1,    2,   11,   11,    1,    2,   12,    2,    1,    1,    1,    1,
	    1,    1,    1,    1,    4,    3,    3,    1,    3,    3,    3,    4,
	    3,    3,    4,    3,    4,    2,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    4,    3,    3,    3,    4,    3,    3,
	    3,    3,    3,    4,    3,    3,    3,    3,    3,    3,    2,   11,
	    2,    1,   11,   30,    0,    2,    1,    2,    2,    3,    3,    0,
	    1,    0,    0,    0,    1,    1,    0,    0,    0,    0,    0,    2,
	    0,    0,    0,    0,    3,    1,    3,    2,    2,    2,    2,    2,
	    3,    2,    2,    3,    2,    3,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    2,    3,    2,    2,    2,    3,    2,    2,
	    2,    2,    2,    3,    2,    2,    2,    2,    2,    2,    4,    4,
	    4,    4,    3,    2,    5,    4,    4,    1,    4,    4,    4,    5,
	    4,    4,    1,    4,    4,    1,    5,    4,    4,    4,    1,    1,
	    6,    1,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    3,    5,    4,    4,    4,    1,    5,
	    4,    3,    5,    4,    4,    3,    4,    4,    4,    5,    4,    4,
	    5,    4,    5,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    5,    4,    4,    4,    5,    4,    4,    4,    4,
	    4,    5,    4,    4,    4,    4,    4,    4,    4,    1,    4,    1,
	    4,    4,    4,    1,    5,    4,    4,    1,    4,    4,    1,    4,
	    4,    4,    4,    1,    0,    0,    0
	};
}

private static final byte _cool_lexer_single_lengths[] = init__cool_lexer_single_lengths_0();


private static byte[] init__cool_lexer_range_lengths_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    3,    3,    3,    3,    3,    4,    0,    0,    0,    0,
	    0,    0,    0,    1,    4,    4,    4,    3,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    3,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    3,
	    3,    3,    3,    4,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,
	    0,    0,    0,    0,    4,    3,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    4,    4,
	    4,    4,    4,    1,    4,    4,    4,    3,    4,    4,    4,    4,
	    4,    4,    3,    4,    4,    3,    4,    4,    4,    4,    3,    3,
	    4,    3,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    3,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    3,    4,    3,
	    4,    4,    4,    3,    4,    4,    4,    3,    4,    4,    3,    4,
	    4,    4,    4,    3,    0,    0,    0
	};
}

private static final byte _cool_lexer_range_lengths[] = init__cool_lexer_range_lengths_0();


private static short[] init__cool_lexer_index_offsets_0()
{
	return new short [] {
	    0,    3,   12,   15,   21,   27,   30,   33,   36,   39,   42,   45,
	   48,   50,   54,   69,   84,   89,   95,  111,  118,  120,  122,  124,
	  126,  128,  130,  132,  135,  144,  152,  160,  165,  173,  181,  189,
	  198,  206,  214,  223,  231,  240,  246,  254,  262,  270,  278,  286,
	  294,  302,  310,  318,  326,  334,  343,  351,  359,  367,  376,  384,
	  392,  400,  408,  416,  425,  433,  441,  449,  457,  465,  473,  480,
	  495,  501,  506,  521,  556,  557,  560,  562,  565,  568,  572,  576,
	  577,  579,  580,  581,  582,  584,  586,  587,  588,  590,  591,  592,
	  595,  596,  597,  598,  599,  607,  612,  619,  625,  631,  637,  643,
	  649,  656,  662,  668,  675,  681,  688,  694,  700,  706,  712,  718,
	  724,  730,  736,  742,  748,  754,  761,  767,  773,  779,  786,  792,
	  798,  804,  810,  816,  823,  829,  835,  841,  847,  853,  859,  868,
	  877,  886,  895,  903,  907,  917,  926,  935,  940,  949,  958,  967,
	  977,  986,  995, 1000, 1009, 1018, 1023, 1033, 1042, 1051, 1060, 1065,
	 1070, 1081, 1086, 1095, 1104, 1113, 1122, 1131, 1140, 1149, 1158, 1167,
	 1176, 1185, 1194, 1203, 1212, 1221, 1229, 1239, 1248, 1257, 1266, 1271,
	 1281, 1290, 1298, 1308, 1317, 1326, 1334, 1343, 1352, 1361, 1371, 1380,
	 1389, 1399, 1408, 1418, 1427, 1436, 1445, 1454, 1463, 1472, 1481, 1490,
	 1499, 1508, 1517, 1526, 1536, 1545, 1554, 1563, 1573, 1582, 1591, 1600,
	 1609, 1618, 1628, 1637, 1646, 1655, 1664, 1673, 1682, 1691, 1696, 1705,
	 1710, 1719, 1728, 1737, 1742, 1752, 1761, 1770, 1775, 1784, 1793, 1798,
	 1807, 1816, 1825, 1834, 1839, 1840, 1841
	};
}

private static final short _cool_lexer_index_offsets[] = init__cool_lexer_index_offsets_0();


private static short[] init__cool_lexer_indicies_0()
{
	return new short [] {
	    2,    3,    1,    5,    6,    5,    7,    8,    9,   10,   11,    4,
	   13,   14,   12,   15,   16,   15,   13,   14,   12,   17,   18,   17,
	    2,    3,    1,   20,   21,   19,   23,   24,   22,   26,   27,   25,
	   29,   30,   28,   32,   33,   31,   35,   36,   34,   39,   40,   38,
	   37,   41,   42,   43,   42,   37,   44,   46,   47,   48,   49,   50,
	   51,   52,   53,   54,   55,   44,   45,   45,   37,   56,   58,   59,
	   60,   61,   62,   63,   64,   65,   66,   67,   56,   57,   57,   37,
	   68,   68,   68,   68,   37,   68,   69,   68,   68,   68,   37,   70,
	   43,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,   70,
	   71,   71,   37,   82,   83,   82,   83,   83,   83,   37,   84,   37,
	   85,   37,   86,   37,   87,   37,   88,   37,   89,   37,   90,   37,
	   56,   56,   37,   82,   83,   91,   92,   82,   83,   83,   83,   37,
	   82,   83,   93,   82,   83,   83,   83,   37,   82,   83,   94,   82,
	   83,   83,   83,   37,   83,   83,   83,   83,   37,   82,   83,   95,
	   82,   83,   83,   83,   37,   82,   83,   96,   82,   83,   83,   83,
	   37,   82,   83,   94,   82,   83,   83,   83,   37,   82,   83,   91,
	   97,   82,   83,   83,   83,   37,   82,   83,   98,   82,   83,   83,
	   83,   37,   82,   83,   94,   82,   83,   83,   83,   37,   82,   83,
	   99,   94,   82,   83,   83,   83,   37,   82,   83,   91,   82,   83,
	   83,   83,   37,   82,   83,   94,  100,   82,   83,   83,   83,   37,
	   83,  101,   83,   83,   83,   37,   82,   83,  102,   82,   83,   83,
	   83,   37,   82,   83,  103,   82,   83,   83,   83,   37,   82,   83,
	  104,   82,   83,   83,   83,   37,   82,   83,  105,   82,   83,   83,
	   83,   37,   82,   83,  106,   82,   83,   83,   83,   37,   82,   83,
	  107,   82,   83,   83,   83,   37,   82,   83,  108,   82,   83,   83,
	   83,   37,   82,   83,  109,   82,   83,   83,   83,   37,   82,   83,
	  110,   82,   83,   83,   83,   37,   82,   83,  111,   82,   83,   83,
	   83,   37,   82,   83,   94,   82,   83,   83,   83,   37,   82,   83,
	  112,  113,   82,   83,   83,   83,   37,   82,   83,   94,   82,   83,
	   83,   83,   37,   82,   83,  114,   82,   83,   83,   83,   37,   82,
	   83,   94,   82,   83,   83,   83,   37,   82,   83,  115,  112,   82,
	   83,   83,   83,   37,   82,   83,   94,   82,   83,   83,   83,   37,
	   82,   83,   94,   82,   83,   83,   83,   37,   82,   83,  116,   82,
	   83,   83,   83,   37,   82,   83,  117,   82,   83,   83,   83,   37,
	   82,   83,   94,   82,   83,   83,   83,   37,   82,   83,  118,  119,
	   82,   83,   83,   83,   37,   82,   83,  120,   82,   83,   83,   83,
	   37,   82,   83,   94,   82,   83,   83,   83,   37,   82,   83,   93,
	   82,   83,   83,   83,   37,   82,   83,  121,   82,   83,   83,   83,
	   37,   82,   83,  122,   82,   83,   83,   83,   37,   82,   83,   93,
	   82,   83,   83,   83,   37,  123,  124,  123,  124,  124,  124,   37,
	  125,   72,   73,   74,   75,   76,   77,   78,   79,   80,   81,  125,
	   71,   71,   37,  124,  126,  124,  124,  124,   37,  124,  124,  124,
	  124,   37,  124,  128,  129,  130,  131,  132,  133,  134,  135,  136,
	  137,  124,  127,  127,   37,  140,  139,  141,  142,  143,  144,  145,
	  146,  147,  148,  149,  151,  152,  153,  154,  155,  157,  158,  159,
	  160,  161,  162,  163,  164,  165,  166,  167,  168,  169,  170,  139,
	  150,  156,  156,  138,  171,   13,   14,   12,  174,  173,   39,  176,
	   38,  178,  179,  177,   39,  139,  176,   38,   39,  175,  176,   38,
	  180,  182,  181,  183,  184,  185,  187,  186,  188,   41,  189,  190,
	  192,  191,  193,  194,  196,  197,  195,  198,  199,  200,  201,  203,
	  204,  124,  203,  124,  124,  124,  202,   68,   68,   68,   68,  205,
	   68,  206,  207,   68,   68,   68,  205,   68,  208,   68,   68,   68,
	  205,   68,  209,   68,   68,   68,  205,   68,  210,   68,   68,   68,
	  205,   68,  211,   68,   68,   68,  205,   68,  209,   68,   68,   68,
	  205,   68,  206,  212,   68,   68,   68,  205,   68,  213,   68,   68,
	   68,  205,   68,  209,   68,   68,   68,  205,   68,  214,  209,   68,
	   68,   68,  205,   68,  206,   68,   68,   68,  205,   68,  209,  215,
	   68,   68,   68,  205,   68,  216,   68,   68,   68,  205,   68,  217,
	   68,   68,   68,  205,   68,  218,   68,   68,   68,  205,   68,  219,
	   68,   68,   68,  205,   68,  220,   68,   68,   68,  205,   68,  221,
	   68,   68,   68,  205,   68,  222,   68,   68,   68,  205,   68,  223,
	   68,   68,   68,  205,   68,  224,   68,   68,   68,  205,   68,  225,
	   68,   68,   68,  205,   68,  209,   68,   68,   68,  205,   68,  226,
	  227,   68,   68,   68,  205,   68,  209,   68,   68,   68,  205,   68,
	  228,   68,   68,   68,  205,   68,  209,   68,   68,   68,  205,   68,
	  229,  226,   68,   68,   68,  205,   68,  209,   68,   68,   68,  205,
	   68,  209,   68,   68,   68,  205,   68,  230,   68,   68,   68,  205,
	   68,  231,   68,   68,   68,  205,   68,  209,   68,   68,   68,  205,
	   68,  232,  233,   68,   68,   68,  205,   68,  234,   68,   68,   68,
	  205,   68,  209,   68,   68,   68,  205,   68,  208,   68,   68,   68,
	  205,   68,  235,   68,   68,   68,  205,   68,  236,   68,   68,   68,
	  205,   68,  208,   68,   68,   68,  205,  203,  204,  124,  237,  203,
	  124,  124,  124,  202,  203,  204,  124,  238,  203,  124,  124,  124,
	  202,  203,  204,  124,  239,  203,  124,  124,  124,  202,  203,  204,
	  124,  240,  203,  124,  124,  124,  202,  241,  204,  124,  241,  124,
	  124,  124,  202,  242,  243,  242,  188,  203,  204,  124,  244,  245,
	  203,  124,  124,  124,  202,  203,  204,  124,  246,  203,  124,  124,
	  124,  202,  203,  204,  124,  247,  203,  124,  124,  124,  202,  124,
	  124,  124,  124,  248,  203,  204,  124,  249,  203,  124,  124,  124,
	  202,  203,  204,  124,  250,  203,  124,  124,  124,  202,  203,  204,
	  124,  251,  203,  124,  124,  124,  202,  203,  204,  124,  252,  253,
	  203,  124,  124,  124,  202,  203,  204,  124,  254,  203,  124,  124,
	  124,  202,  203,  204,  124,  255,  203,  124,  124,  124,  202,  124,
	  124,  124,  124,  256,  203,  204,  124,  257,  203,  124,  124,  124,
	  202,  203,  204,  124,  258,  203,  124,  124,  124,  202,  124,  124,
	  124,  124,  259,  203,  204,  124,  260,  261,  203,  124,  124,  124,
	  202,  203,  204,  124,  262,  203,  124,  124,  124,  202,  203,  204,
	  124,  263,  203,  124,  124,  124,  202,  203,  204,  124,  264,  203,
	  124,  124,  124,  202,  124,  124,  124,  124,  265,  124,  124,  124,
	  124,  266,  203,  204,  124,  267,  268,  269,  203,  124,  124,  124,
	  202,  124,  124,  124,  124,  270,  203,  204,  124,  271,  203,  124,
	  124,  124,  202,  203,  204,  124,  272,  203,  124,  124,  124,  202,
	  203,  204,  124,  273,  203,  124,  124,  124,  202,  203,  204,  124,
	  274,  203,  124,  124,  124,  202,  203,  204,  124,  275,  203,  124,
	  124,  124,  202,  203,  204,  124,  276,  203,  124,  124,  124,  202,
	  203,  204,  124,  277,  203,  124,  124,  124,  202,  203,  204,  124,
	  278,  203,  124,  124,  124,  202,  203,  204,  124,  279,  203,  124,
	  124,  124,  202,  203,  204,  124,  280,  203,  124,  124,  124,  202,
	  203,  204,  124,  281,  203,  124,  124,  124,  202,  203,  204,  124,
	  282,  203,  124,  124,  124,  202,  203,  204,  124,  283,  203,  124,
	  124,  124,  202,  203,  204,  124,  284,  203,  124,  124,  124,  202,
	  203,  204,  124,  285,  203,  124,  124,  124,  202,  203,  204,  124,
	  203,  124,  124,  124,  286,  203,  204,  124,  287,  288,  203,  124,
	  124,  124,  202,  203,  204,  124,  281,  203,  124,  124,  124,  202,
	  203,  204,  124,  289,  203,  124,  124,  124,  202,  203,  204,  124,
	  290,  203,  124,  124,  124,  202,  124,  124,  124,  124,  291,  203,
	  204,  124,  292,  293,  203,  124,  124,  124,  202,  203,  204,  124,
	  294,  203,  124,  124,  124,  202,  203,  204,  296,  203,  296,  296,
	  296,  295,  203,  204,  296,  297,  298,  203,  296,  296,  296,  295,
	  203,  204,  296,  299,  203,  296,  296,  296,  295,  203,  204,  296,
	  300,  203,  296,  296,  296,  295,  203,  204,  296,  203,  296,  296,
	  296,  202,  203,  204,  296,  301,  203,  296,  296,  296,  295,  203,
	  204,  296,  302,  203,  296,  296,  296,  295,  203,  204,  296,  300,
	  203,  296,  296,  296,  295,  203,  204,  296,  297,  303,  203,  296,
	  296,  296,  295,  203,  204,  296,  304,  203,  296,  296,  296,  295,
	  203,  204,  296,  300,  203,  296,  296,  296,  295,  203,  204,  296,
	  305,  300,  203,  296,  296,  296,  295,  203,  204,  296,  297,  203,
	  296,  296,  296,  295,  203,  204,  296,  300,  306,  203,  296,  296,
	  296,  295,  203,  204,  296,  307,  203,  296,  296,  296,  202,  203,
	  204,  296,  308,  203,  296,  296,  296,  295,  203,  204,  296,  309,
	  203,  296,  296,  296,  295,  203,  204,  296,  310,  203,  296,  296,
	  296,  295,  203,  204,  296,  311,  203,  296,  296,  296,  295,  203,
	  204,  296,  312,  203,  296,  296,  296,  295,  203,  204,  296,  313,
	  203,  296,  296,  296,  295,  203,  204,  296,  314,  203,  296,  296,
	  296,  295,  203,  204,  296,  315,  203,  296,  296,  296,  295,  203,
	  204,  296,  316,  203,  296,  296,  296,  295,  203,  204,  296,  317,
	  203,  296,  296,  296,  295,  203,  204,  296,  300,  203,  296,  296,
	  296,  295,  203,  204,  296,  318,  319,  203,  296,  296,  296,  295,
	  203,  204,  296,  300,  203,  296,  296,  296,  295,  203,  204,  296,
	  320,  203,  296,  296,  296,  295,  203,  204,  296,  300,  203,  296,
	  296,  296,  295,  203,  204,  296,  321,  318,  203,  296,  296,  296,
	  295,  203,  204,  296,  300,  203,  296,  296,  296,  295,  203,  204,
	  296,  300,  203,  296,  296,  296,  295,  203,  204,  296,  322,  203,
	  296,  296,  296,  295,  203,  204,  296,  323,  203,  296,  296,  296,
	  295,  203,  204,  296,  300,  203,  296,  296,  296,  295,  203,  204,
	  296,  324,  325,  203,  296,  296,  296,  295,  203,  204,  296,  326,
	  203,  296,  296,  296,  295,  203,  204,  296,  300,  203,  296,  296,
	  296,  295,  203,  204,  296,  299,  203,  296,  296,  296,  295,  203,
	  204,  296,  327,  203,  296,  296,  296,  295,  203,  204,  296,  328,
	  203,  296,  296,  296,  295,  203,  204,  296,  299,  203,  296,  296,
	  296,  295,  203,  204,  124,  329,  203,  124,  124,  124,  202,  124,
	  124,  124,  124,  330,  203,  204,  124,  331,  203,  124,  124,  124,
	  202,  124,  124,  124,  124,  332,  203,  204,  124,  333,  203,  124,
	  124,  124,  202,  203,  204,  124,  334,  203,  124,  124,  124,  202,
	  203,  204,  124,  335,  203,  124,  124,  124,  202,  124,  124,  124,
	  124,  336,  203,  204,  124,  337,  338,  203,  124,  124,  124,  202,
	  203,  204,  124,  339,  203,  124,  124,  124,  202,  203,  204,  124,
	  340,  203,  124,  124,  124,  202,  124,  124,  124,  124,  341,  203,
	  204,  124,  342,  203,  124,  124,  124,  202,  203,  204,  124,  343,
	  203,  124,  124,  124,  202,  124,  124,  124,  124,  188,  203,  204,
	  124,  344,  203,  124,  124,  124,  202,  203,  204,  124,  345,  203,
	  124,  124,  124,  202,  203,  204,  124,  346,  203,  124,  124,  124,
	  202,  203,  204,  124,  347,  203,  124,  124,  124,  202,  124,  124,
	  124,  124,  348,  349,  350,  351,    0
	};
}

private static final short _cool_lexer_indicies[] = init__cool_lexer_indicies_0();


private static short[] init__cool_lexer_trans_targs_0()
{
	return new short [] {
	   75,    0,   75,    1,    2,    3,    5,    6,    7,    8,    9,   10,
	    0,   75,    1,    4,    5,    4,    5,    0,   75,    1,    0,   75,
	    1,    0,   75,    1,    0,   75,    1,    0,   75,    1,    0,   75,
	    1,   75,   79,   80,   82,   89,   13,   14,   15,  101,  102,  108,
	  111,  113,  125,  129,  131,  132,  135,  139,   15,  101,  102,  108,
	  111,  113,  125,  129,  131,  132,  135,  139,  101,  114,   18,   19,
	   28,   35,   38,   40,   53,   57,   59,   60,   63,   67,  147,   19,
	   21,   22,   23,   24,   25,   26,   27,   29,   32,   30,   31,   33,
	   34,   36,   37,   39,   41,   42,   43,   44,   45,   46,   47,   48,
	   49,   50,   51,   52,   54,   55,   56,   58,   61,   62,   64,   66,
	   65,   68,   69,   71,  100,   71,  170,  193,  194,  201,  204,  206,
	  219,  223,  225,  226,  229,  233,   75,   75,   76,   77,   78,   83,
	   84,   86,   87,   88,   90,   91,   92,   93,   94,   95,   98,   99,
	  100,  142,  148,  155,  162,  168,  186,  191,  238,  240,  244,  251,
	  256,  257,  258,   75,   75,   75,   11,   75,   81,   79,   80,   81,
	   75,   75,   85,   75,   75,   75,   75,   12,   75,   75,   75,   75,
	   92,   75,   75,   75,   96,   97,   75,   75,   75,   75,   75,   13,
	   14,   75,  103,  105,  104,   16,  106,  107,  109,  110,  112,   17,
	  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  126,  127,
	  128,  130,  133,  134,  136,  138,  137,  140,  141,  143,  144,  145,
	  146,   18,  147,   20,  149,  152,  150,  151,   75,  153,  154,   70,
	  156,  159,  157,  158,   75,  160,  161,   75,  163,  167,  164,  165,
	  166,   75,   75,  169,   72,  181,   75,  171,  172,  173,  174,  175,
	  176,  177,  178,  179,  180,   73,  182,  183,  184,  185,   75,  187,
	  188,  189,  190,   75,  192,  236,   74,   75,  193,  195,  198,  196,
	  197,  199,  200,  202,  203,  205,  207,  208,  209,  210,  211,  212,
	  213,  214,  215,  216,  217,  218,  220,  221,  222,  224,  227,  228,
	  230,  232,  231,  234,  235,  237,   75,  239,   75,  241,  242,  243,
	   75,  245,  248,  246,  247,   75,  249,  250,  252,  253,  254,  255,
	   75,   75,   75,   75
	};
}

private static final short _cool_lexer_trans_targs[] = init__cool_lexer_trans_targs_0();


private static short[] init__cool_lexer_trans_actions_0()
{
	return new short [] {
	   33,    9,  173,   11,   13,   13,   13,    0,    0,    0,    0,    0,
	  143,  221,  146,  143,  143,    9,    9,  226,  276,  231,  209,  270,
	  213,  177,  246,  181,  201,  264,  205,  193,  258,  197,  185,  252,
	  189,   31,    0,    0,    0,    0,    0,    0,    7,  169,  169,  169,
	  241,  241,  169,  169,  241,  169,  169,  169,    0,  143,  143,  143,
	  217,  217,  143,  143,  217,  143,  143,  143,    9,    9,    0,  143,
	  143,  143,  143,  143,  143,  143,  143,  143,  143,  143,  152,    9,
	    0,    0,    0,    0,    0,    0,    3,    9,    9,    9,    0,    9,
	    9,    9,    9,    9,    0,    9,    9,    9,    9,    9,    9,    9,
	    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
	    9,    9,    9,    1,  155,    0,  155,  236,  236,  236,  236,  236,
	  236,  236,  236,  236,  236,  236,   25,   23,    0,  158,   21,    0,
	    0,    0,    0,   21,    0,    0,  143,    0,    0,    0,    0,    0,
	  217,  217,  217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
	    0,    0,    0,  149,   29,   89,    0,  137,    0,   15,   15,   15,
	   92,   83,    0,  140,   77,  125,   80,    0,   27,  122,   86,  131,
	    9,  116,  119,  101,    0,    0,   74,  104,   98,  128,   71,    5,
	    5,   68,    9,    9,  155,    0,    9,  155,    9,  155,    9,    0,
	    9,    9,    9,    9,    9,    9,    9,    9,    9,  155,  155,    9,
	  155,  155,    9,  155,    9,    9,  155,    9,    9,  155,  155,  155,
	  155,   35,   21,    0,  155,  155,  155,    0,   50,  155,  155,    0,
	  155,  155,  155,    0,   44,  155,    0,   56,  155,    0,  155,  155,
	    0,  134,   47,    0,    0,  155,   38,  155,  155,  155,  155,  155,
	  155,  155,  155,  155,  155,    0,  155,  155,  155,  155,  161,  155,
	  155,  155,    0,   62,  155,  155,    0,  165,  155,  155,  155,  155,
	  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
	  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
	  155,  155,  155,  155,  155,    0,   95,    0,   53,  155,  155,    0,
	   65,  155,  155,  155,    0,   41,  155,    0,  155,  155,  155,    0,
	   59,  110,  113,  107
	};
}

private static final short _cool_lexer_trans_actions[] = init__cool_lexer_trans_actions_0();


private static short[] init__cool_lexer_to_state_actions_0()
{
	return new short [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0
	};
}

private static final short _cool_lexer_to_state_actions[] = init__cool_lexer_to_state_actions_0();


private static short[] init__cool_lexer_from_state_actions_0()
{
	return new short [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0
	};
}

private static final short _cool_lexer_from_state_actions[] = init__cool_lexer_from_state_actions_0();


private static short[] init__cool_lexer_eof_trans_0()
{
	return new short [] {
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,   38,    0,  172,  173,  174,  176,  176,  176,  176,  181,
	  182,  184,  185,  186,  187,  189,  190,  191,  192,  194,  195,  196,
	  199,  200,  201,  202,  203,  206,  206,  206,  206,  206,  206,  206,
	  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
	  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
	  206,  206,  206,  206,  206,  206,  206,  206,  206,  206,  203,  203,
	  203,  203,  203,  189,  203,  203,  203,  249,  203,  203,  203,  203,
	  203,  203,  257,  203,  203,  260,  203,  203,  203,  203,  266,  267,
	  203,  271,  203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
	  203,  203,  203,  203,  203,  287,  203,  203,  203,  203,  292,  203,
	  203,  296,  296,  296,  296,  203,  296,  296,  296,  296,  296,  296,
	  296,  296,  296,  203,  296,  296,  296,  296,  296,  296,  296,  296,
	  296,  296,  296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
	  296,  296,  296,  296,  296,  296,  296,  296,  203,  331,  203,  333,
	  203,  203,  203,  337,  203,  203,  203,  342,  203,  203,  189,  203,
	  203,  203,  203,  349,  350,  351,  352
	};
}

private static final short _cool_lexer_eof_trans[] = init__cool_lexer_eof_trans_0();


static final int cool_lexer_start = 75;
static final int cool_lexer_first_final = 75;
static final int cool_lexer_error = -1;

static final int cool_lexer_en_main = 75;


// line 320 "cool.rl"
}
