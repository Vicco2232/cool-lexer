
// line 1 "cool.rl"
import java_cup.runtime.Symbol;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import java.util.LinkedList;
import java.util.Arrays;


// line 233 "cool.rl"


class CoolLexer implements java_cup.runtime.Scanner {
    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();
    private int curr_lineno = 1;
    private AbstractSymbol filename;
    private BufferedReader reader;
    LinkedList<Symbol> tokens = new LinkedList<Symbol>();
    LinkedList<Integer> lineNumbers = new LinkedList<Integer>();

    CoolLexer(java.io.Reader reader) throws IOException {
        this();
        if (null == reader) {
            throw (new Error("Error: Bad input stream initializer."));
        }
        this.reader = new java.io.BufferedReader(reader);
        run_lexer();
    }

    CoolLexer(java.io.InputStream instream) throws IOException {
        this();
        if (null == instream) {
            throw (new Error("Error: Bad input stream initializer."));
        }
        this.reader = new BufferedReader(new InputStreamReader(instream));
        run_lexer();
    }

    private CoolLexer() {
        // Initialization code here
    }

    private void run_lexer() throws IOException {
        StringBuffer sb = new StringBuffer();
        int c;
        while ((c = this.reader.read()) != -1) {
            sb.append(Character.toChars(c));
        }
        char[] data = sb.toString().toCharArray();

        int p = 0;
        int pe = data.length;
        int eof = data.length;
        int ts = 0;
        int te = 0;
        int cs;
        int act;

        // ms and me means mark start and mark end respectively
        int ms = 0;
        int me = 0;

        
// line 72 "CoolLexer.java"
	{
	cs = cool_lexer_start;
	ts = -1;
	te = -1;
	act = 0;
	}

// line 290 "cool.rl"
        
// line 82 "CoolLexer.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
case 1:
	_acts = _cool_lexer_from_state_actions[cs];
	_nacts = (int) _cool_lexer_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _cool_lexer_actions[_acts++] ) {
	case 52:
// line 1 "NONE"
	{ts = p;}
	break;
// line 107 "CoolLexer.java"
		}
	}

	_match: do {
	_keys = _cool_lexer_key_offsets[cs];
	_trans = _cool_lexer_index_offsets[cs];
	_klen = _cool_lexer_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _cool_lexer_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _cool_lexer_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _cool_lexer_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _cool_lexer_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _cool_lexer_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _cool_lexer_indicies[_trans];
case 3:
	cs = _cool_lexer_trans_targs[_trans];

	if ( _cool_lexer_trans_actions[_trans] != 0 ) {
		_acts = _cool_lexer_trans_actions[_trans];
		_nacts = (int) _cool_lexer_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _cool_lexer_actions[_acts++] )
			{
	case 0:
// line 14 "cool.rl"
	{ push_token(new Symbol(TokenConstants.CLASS)); }
	break;
	case 1:
// line 15 "cool.rl"
	{ push_token(new Symbol(TokenConstants.INHERITS)); }
	break;
	case 2:
// line 16 "cool.rl"
	{ push_token(new Symbol(TokenConstants.NEW)); }
	break;
	case 3:
// line 17 "cool.rl"
	{ push_token(new Symbol(TokenConstants.IF)); }
	break;
	case 4:
// line 18 "cool.rl"
	{ push_token(new Symbol(TokenConstants.THEN)); }
	break;
	case 5:
// line 19 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ELSE)); }
	break;
	case 6:
// line 20 "cool.rl"
	{ push_token(new Symbol(TokenConstants.FI)); }
	break;
	case 7:
// line 21 "cool.rl"
	{ push_token(new Symbol(TokenConstants.CASE)); }
	break;
	case 8:
// line 22 "cool.rl"
	{ push_token(new Symbol(TokenConstants.OF)); }
	break;
	case 9:
// line 23 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ESAC)); }
	break;
	case 10:
// line 24 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ISVOID)); }
	break;
	case 11:
// line 25 "cool.rl"
	{ push_token(new Symbol(TokenConstants.WHILE)); }
	break;
	case 12:
// line 26 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LOOP)); }
	break;
	case 13:
// line 27 "cool.rl"
	{ push_token(new Symbol(TokenConstants.POOL)); }
	break;
	case 14:
// line 30 "cool.rl"
	{
                        String token = get_token(data, ms, me);
                        AbstractSymbol sym = AbstractTable.idtable.addString(token);
                        push_token(new Symbol(TokenConstants.TYPEID, sym));
                    }
	break;
	case 15:
// line 35 "cool.rl"
	{
                        String token = get_token(data, ms, me);
                        AbstractSymbol sym = AbstractTable.idtable.addString(token);
                        push_token(new Symbol(TokenConstants.OBJECTID, sym));
                    }
	break;
	case 16:
// line 42 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ASSIGN)); }
	break;
	case 17:
// line 43 "cool.rl"
	{ push_token(new Symbol(TokenConstants.PLUS)); }
	break;
	case 18:
// line 44 "cool.rl"
	{ push_token(new Symbol(TokenConstants.MINUS)); }
	break;
	case 19:
// line 45 "cool.rl"
	{ push_token(new Symbol(TokenConstants.MULT)); }
	break;
	case 20:
// line 46 "cool.rl"
	{ push_token(new Symbol(TokenConstants.DIV)); }
	break;
	case 21:
// line 47 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LPAREN)); }
	break;
	case 22:
// line 48 "cool.rl"
	{ push_token(new Symbol(TokenConstants.RPAREN)); }
	break;
	case 23:
// line 49 "cool.rl"
	{ push_token(new Symbol(TokenConstants.NOT)); }
	break;
	case 24:
// line 50 "cool.rl"
	{ push_token(new Symbol(TokenConstants.EQ)); }
	break;
	case 25:
// line 51 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LT)); }
	break;
	case 26:
// line 52 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LE)); }
	break;
	case 27:
// line 53 "cool.rl"
	{ push_token(new Symbol(TokenConstants.NEG)); }
	break;
	case 28:
// line 54 "cool.rl"
	{ push_token(new Symbol(TokenConstants.LBRACE)); }
	break;
	case 29:
// line 55 "cool.rl"
	{ push_token(new Symbol(TokenConstants.RBRACE)); }
	break;
	case 30:
// line 58 "cool.rl"
	{ push_token(new Symbol(TokenConstants.COLON)); }
	break;
	case 31:
// line 59 "cool.rl"
	{ push_token(new Symbol(TokenConstants.SEMI)); }
	break;
	case 32:
// line 60 "cool.rl"
	{ push_token(new Symbol(TokenConstants.DOT)); }
	break;
	case 33:
// line 61 "cool.rl"
	{ push_token(new Symbol(TokenConstants.COMMA)); }
	break;
	case 34:
// line 62 "cool.rl"
	{ push_token(new Symbol(TokenConstants.AT)); }
	break;
	case 35:
// line 65 "cool.rl"
	{
                      String token = get_token(data, ms, me);
                      Integer i = Integer.parseInt(token);
                      AbstractSymbol sym = AbstractTable.inttable.addInt(i);
                      push_token(new Symbol(TokenConstants.INT_CONST, sym));
                    }
	break;
	case 36:
// line 71 "cool.rl"
	{
                      String token = get_token(data, ts, te);
                      if (token == "true") {
                        push_token(new Symbol(TokenConstants.BOOL_CONST, true));
                      } else {
                        push_token(new Symbol(TokenConstants.BOOL_CONST, false));
                      }
                    }
	break;
	case 37:
// line 79 "cool.rl"
	{
                      // String token = get_token(data, ms, me);
                      String token = sb.toString();
                      AbstractSymbol sym = AbstractTable.stringtable.addString(token);
                      push_token(new Symbol(TokenConstants.STR_CONST, sym));
                    }
	break;
	case 38:
// line 87 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ERROR, "EOF in string constant")); }
	break;
	case 39:
// line 88 "cool.rl"
	{ push_token(new Symbol(TokenConstants.ERROR, "Unmatched *)")); }
	break;
	case 40:
// line 96 "cool.rl"
	{ ms = me = p; }
	break;
	case 41:
// line 97 "cool.rl"
	{ me = p + 1; }
	break;
	case 42:
// line 101 "cool.rl"
	{ sb = new StringBuffer(); }
	break;
	case 43:
// line 102 "cool.rl"
	{ sb.append(get_token(data, ms, me)); }
	break;
	case 44:
// line 103 "cool.rl"
	{ sb.append('\b'); }
	break;
	case 45:
// line 104 "cool.rl"
	{ sb.append('\t'); }
	break;
	case 46:
// line 105 "cool.rl"
	{ sb.append('\n'); }
	break;
	case 47:
// line 106 "cool.rl"
	{ sb.append('\f'); }
	break;
	case 48:
// line 107 "cool.rl"
	{ sb.append('"'); }
	break;
	case 49:
// line 108 "cool.rl"
	{ sb.append(data[p]); }
	break;
	case 50:
// line 110 "cool.rl"
	{ this.curr_lineno += 1; }
	break;
	case 53:
// line 1 "NONE"
	{te = p+1;}
	break;
	case 54:
// line 230 "cool.rl"
	{te = p+1;}
	break;
	case 55:
// line 231 "cool.rl"
	{te = p+1;{ push_token(new Symbol(TokenConstants.ERROR, data[p])); }}
	break;
	case 56:
// line 230 "cool.rl"
	{te = p;p--;}
	break;
	case 57:
// line 231 "cool.rl"
	{te = p;p--;{ push_token(new Symbol(TokenConstants.ERROR, data[p])); }}
	break;
	case 58:
// line 230 "cool.rl"
	{{p = ((te))-1;}}
	break;
	case 59:
// line 231 "cool.rl"
	{{p = ((te))-1;}{ push_token(new Symbol(TokenConstants.ERROR, data[p])); }}
	break;
// line 428 "CoolLexer.java"
			}
		}
	}

case 2:
	_acts = _cool_lexer_to_state_actions[cs];
	_nacts = (int) _cool_lexer_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _cool_lexer_actions[_acts++] ) {
	case 51:
// line 1 "NONE"
	{ts = -1;}
	break;
// line 442 "CoolLexer.java"
		}
	}

	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	if ( _cool_lexer_eof_trans[cs] > 0 ) {
		_trans = _cool_lexer_eof_trans[cs] - 1;
		_goto_targ = 3;
		continue _goto;
	}
	}

case 5:
	}
	break; }
	}

// line 291 "cool.rl"
    }

    public Symbol next_token() {
        return this.tokens.poll();
    }

    void push_token(Symbol sym) {
        this.tokens.add(sym);
        this.lineNumbers.add(new Integer(this.curr_lineno));
    }

    public Integer next_lineno() {
        return this.lineNumbers.poll();
    }

    void set_filename(String fname) {
        filename = AbstractTable.stringtable.addString(fname);
    }

    String get_token(char[] data, int ts, int te) {
        char[] token = Arrays.copyOfRange(data, ts, te);
        return new String(token);
    }

    AbstractSymbol curr_filename() {
        return filename;
    }

    
// line 495 "CoolLexer.java"
private static byte[] init__cool_lexer_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,   15,    1,   30,    1,   41,    1,
	   43,    1,   49,    1,   50,    1,   51,    1,   52,    1,   53,    1,
	   54,    1,   55,    1,   56,    1,   57,    1,   58,    1,   59,    2,
	    3,   56,    2,    4,   56,    2,    5,   56,    2,    6,   56,    2,
	    7,   56,    2,    8,   56,    2,    9,   56,    2,   11,   56,    2,
	   12,   56,    2,   13,   56,    2,   14,   56,    2,   15,   56,    2,
	   16,   56,    2,   17,   56,    2,   18,   56,    2,   19,   56,    2,
	   20,   56,    2,   21,   56,    2,   22,   56,    2,   23,   56,    2,
	   24,   56,    2,   25,   56,    2,   26,   56,    2,   27,   56,    2,
	   28,   56,    2,   29,   56,    2,   30,   56,    2,   31,   56,    2,
	   32,   56,    2,   33,   56,    2,   34,   56,    2,   35,   56,    2,
	   36,   56,    2,   38,   56,    2,   39,   56,    2,   40,   41,    2,
	   40,   43,    2,   50,   56,    2,   53,   14,    2,   53,   41,    2,
	   53,   42,    3,   10,   15,   56,    3,   14,   15,   56,    3,   30,
	   40,   41,    3,   43,   37,   54,    3,   44,   40,   41,    3,   44,
	   40,   43,    3,   45,   40,   41,    3,   45,   40,   43,    3,   46,
	   40,   41,    3,   46,   40,   43,    3,   47,   40,   41,    3,   47,
	   40,   43,    3,   48,   40,   41,    3,   48,   40,   43,    3,   53,
	   40,   41,    4,   40,   43,   37,   54,    4,   50,   46,   40,   41,
	    4,   50,   46,   40,   43,    4,   53,    2,   40,   41,    4,   53,
	   30,   40,   41,    5,   44,   40,   43,   37,   54,    5,   45,   40,
	   43,   37,   54,    5,   46,   40,   43,   37,   54,    5,   47,   40,
	   43,   37,   54,    5,   48,   40,   43,   37,   54,    6,   50,   46,
	   40,   43,   37,   54
	};
}

private static final byte _cool_lexer_actions[] = init__cool_lexer_actions_0();


private static short[] init__cool_lexer_key_offsets_0()
{
	return new short [] {
	    0,    2,   10,   12,   17,   22,   24,   26,   28,   30,   32,   34,
	   36,   37,   41,   58,   75,   82,   90,  100,  117,  127,  128,  129,
	  130,  131,  132,  133,  134,  137,  149,  160,  171,  178,  189,  200,
	  211,  223,  234,  245,  257,  268,  280,  288,  299,  310,  321,  332,
	  343,  354,  365,  376,  387,  398,  409,  421,  432,  443,  454,  466,
	  477,  488,  499,  510,  521,  533,  544,  555,  566,  577,  588,  599,
	  607,  614,  631,  668,  668,  670,  671,  673,  675,  678,  681,  681,
	  682,  682,  682,  682,  683,  684,  684,  684,  686,  686,  686,  688,
	  688,  688,  688,  688,  699,  706,  715,  723,  731,  739,  747,  755,
	  764,  772,  780,  789,  797,  806,  814,  822,  830,  838,  846,  854,
	  862,  870,  878,  886,  894,  903,  911,  919,  927,  936,  944,  952,
	  960,  968,  976,  985,  993, 1001, 1009, 1017, 1025, 1033, 1046, 1058,
	 1070, 1077, 1089, 1101, 1113, 1117, 1130, 1142, 1154, 1161, 1173, 1185,
	 1192, 1205, 1217, 1229, 1241, 1248, 1255, 1269, 1276, 1288, 1300, 1312,
	 1324, 1336, 1348, 1360, 1372, 1384, 1396, 1408, 1420, 1432, 1444, 1456,
	 1467, 1480, 1492, 1504, 1516, 1523, 1536, 1548, 1559, 1572, 1584, 1596,
	 1607, 1619, 1631, 1643, 1656, 1668, 1680, 1693, 1705, 1718, 1730, 1742,
	 1754, 1766, 1778, 1790, 1802, 1814, 1826, 1838, 1850, 1862, 1875, 1887,
	 1899, 1911, 1924, 1936, 1948, 1960, 1972, 1984, 1997, 2009, 2021, 2033,
	 2045, 2057, 2069, 2081, 2088, 2100, 2107, 2119, 2131, 2143, 2150, 2163,
	 2175, 2187, 2194, 2206, 2218, 2225, 2237, 2249, 2261, 2273, 2280, 2280,
	 2280
	};
}

private static final short _cool_lexer_key_offsets[] = init__cool_lexer_key_offsets_0();


private static char[] init__cool_lexer_trans_keys_0()
{
	return new char [] {
	   34,   92,    9,   10,   32,   34,   98,  102,  110,  116,   34,   92,
	    9,   10,   32,   34,   92,    9,   10,   32,   34,   92,   34,   92,
	   34,   92,   34,   92,   34,   92,   34,   92,   34,   92,   10,   42,
	   10,   32,   58,    9,   13,   32,   99,  101,  102,  105,  108,  110,
	  111,  112,  116,  119,    9,   13,   65,   90,   97,  122,   32,   99,
	  101,  102,  105,  108,  110,  111,  112,  116,  119,    9,   13,   65,
	   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,   95,  104,
	   48,   57,   65,   90,   97,  122,   32,   95,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   99,  101,  102,  105,  108,  110,  111,
	  112,  116,  119,    9,   13,   65,   90,   97,  122,   32,   95,    9,
	   13,   48,   57,   65,   90,   97,  122,  110,  104,  101,  114,  105,
	  116,  115,   32,    9,   13,   32,   95,   97,  108,    9,   13,   48,
	   57,   65,   90,   98,  122,   32,   95,  115,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   95,  101,    9,   13,   48,   57,   65,
	   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,   32,   95,
	   97,    9,   13,   48,   57,   65,   90,   98,  122,   32,   95,  115,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  115,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   95,  108,  115,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   95,   97,    9,   13,
	   48,   57,   65,   90,   98,  122,   32,   95,   99,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   95,   97,  105,    9,   13,   48,
	   57,   65,   90,   98,  122,   32,   95,  108,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   95,  102,  110,    9,   13,   48,   57,
	   65,   90,   97,  122,   95,  104,   48,   57,   65,   90,   97,  122,
	   32,   95,  101,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   95,  114,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,
	  105,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  116,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  115,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   95,  105,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   95,  115,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   95,  118,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   95,  111,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   95,  105,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   95,  100,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   95,  101,  111,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   95,  116,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   95,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   95,  112,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,
	  101,  111,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,
	  119,    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  102,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   95,  111,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   95,  111,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   95,  108,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   95,  104,  114,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   95,  101,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   95,  110,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   95,  117,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   95,  104,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   95,  105,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   95,  108,    9,   13,   48,   57,   65,   90,   97,  122,   95,
	  104,   48,   57,   65,   90,   97,  122,   95,   48,   57,   65,   90,
	   97,  122,   95,   99,  101,  102,  105,  108,  110,  111,  112,  116,
	  119,   48,   57,   65,   90,   97,  122,   10,   32,   34,   40,   41,
	   42,   43,   44,   45,   46,   47,   58,   59,   60,   61,   64,   99,
	  101,  102,  105,  108,  110,  111,  112,  116,  119,  123,  125,  126,
	    9,   13,   48,   57,   65,   90,   97,  122,   34,   92,   42,   10,
	   42,   10,   42,   10,   41,   42,   10,   41,   42,   41,   45,   10,
	   48,   57,   45,   61,   32,   58,   95,    9,   13,   48,   57,   65,
	   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,   95,   97,
	  108,   48,   57,   65,   90,   98,  122,   95,  115,   48,   57,   65,
	   90,   97,  122,   95,  101,   48,   57,   65,   90,   97,  122,   95,
	   97,   48,   57,   65,   90,   98,  122,   95,  115,   48,   57,   65,
	   90,   97,  122,   95,  115,   48,   57,   65,   90,   97,  122,   95,
	  108,  115,   48,   57,   65,   90,   97,  122,   95,   97,   48,   57,
	   65,   90,   98,  122,   95,   99,   48,   57,   65,   90,   97,  122,
	   95,   97,  105,   48,   57,   65,   90,   98,  122,   95,  108,   48,
	   57,   65,   90,   97,  122,   95,  102,  110,   48,   57,   65,   90,
	   97,  122,   95,  101,   48,   57,   65,   90,   97,  122,   95,  114,
	   48,   57,   65,   90,   97,  122,   95,  105,   48,   57,   65,   90,
	   97,  122,   95,  116,   48,   57,   65,   90,   97,  122,   95,  115,
	   48,   57,   65,   90,   97,  122,   95,  105,   48,   57,   65,   90,
	   97,  122,   95,  115,   48,   57,   65,   90,   97,  122,   95,  118,
	   48,   57,   65,   90,   97,  122,   95,  111,   48,   57,   65,   90,
	   97,  122,   95,  105,   48,   57,   65,   90,   97,  122,   95,  100,
	   48,   57,   65,   90,   97,  122,   95,  101,  111,   48,   57,   65,
	   90,   97,  122,   95,  116,   48,   57,   65,   90,   97,  122,   95,
	  111,   48,   57,   65,   90,   97,  122,   95,  112,   48,   57,   65,
	   90,   97,  122,   95,  101,  111,   48,   57,   65,   90,   97,  122,
	   95,  119,   48,   57,   65,   90,   97,  122,   95,  102,   48,   57,
	   65,   90,   97,  122,   95,  111,   48,   57,   65,   90,   97,  122,
	   95,  111,   48,   57,   65,   90,   97,  122,   95,  108,   48,   57,
	   65,   90,   97,  122,   95,  104,  114,   48,   57,   65,   90,   97,
	  122,   95,  101,   48,   57,   65,   90,   97,  122,   95,  110,   48,
	   57,   65,   90,   97,  122,   95,  117,   48,   57,   65,   90,   97,
	  122,   95,  104,   48,   57,   65,   90,   97,  122,   95,  105,   48,
	   57,   65,   90,   97,  122,   95,  108,   48,   57,   65,   90,   97,
	  122,   32,   58,   95,   97,  108,    9,   13,   48,   57,   65,   90,
	   98,  122,   32,   58,   95,  115,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  101,    9,   13,   48,   57,   65,   90,
	   97,  122,   95,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	   97,    9,   13,   48,   57,   65,   90,   98,  122,   32,   58,   95,
	  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,  105,    9,
	   13,   32,   58,   95,  108,  115,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  115,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  101,    9,   13,   48,   57,   65,   90,
	   97,  122,   95,   48,   57,   65,   90,   97,  122,   32,   58,   95,
	   97,    9,   13,   48,   57,   65,   90,   98,  122,   32,   58,   95,
	   99,    9,   13,   48,   57,   65,   90,   97,  122,   95,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,   97,  105,    9,   13,   48,
	   57,   65,   90,   98,  122,   32,   58,   95,  108,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  115,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  101,    9,   13,   48,
	   57,   65,   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,
	   95,   48,   57,   65,   90,   97,  122,   32,   58,   95,  102,  110,
	  115,    9,   13,   48,   57,   65,   90,   97,  122,   95,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  101,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  114,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  105,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  116,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  115,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  105,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  115,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  118,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  111,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  105,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  100,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  118,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  111,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  105,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  100,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   58,   95,  101,  111,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  116,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  111,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  112,    9,   13,   48,   57,
	   65,   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  101,  111,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   58,   95,  119,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   58,   95,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,   97,  108,    9,   13,   48,   57,   65,   90,   98,  122,
	   32,   58,   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   58,   95,  101,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   58,   95,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,   97,    9,   13,   48,   57,   65,   90,   98,  122,   32,
	   58,   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  115,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   58,   95,  108,  115,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   58,   95,   97,    9,   13,   48,   57,   65,   90,   98,  122,
	   32,   58,   95,   99,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   58,   95,   97,  105,    9,   13,   48,   57,   65,   90,   98,
	  122,   32,   58,   95,  108,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   58,   95,  102,  110,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  104,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  101,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  114,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  105,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  116,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  115,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  105,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  115,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  118,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  111,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  105,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  100,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  101,  111,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   58,   95,  116,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   58,   95,  111,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   58,   95,  112,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   58,   95,  101,  111,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  119,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  102,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  111,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  111,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  108,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   58,   95,  104,  114,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  101,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  110,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  117,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  104,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  105,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  108,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  116,    9,   13,   48,
	   57,   65,   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,
	   32,   58,   95,  102,    9,   13,   48,   57,   65,   90,   97,  122,
	   95,   48,   57,   65,   90,   97,  122,   32,   58,   95,  111,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  111,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   58,   95,  108,    9,
	   13,   48,   57,   65,   90,   97,  122,   95,   48,   57,   65,   90,
	   97,  122,   32,   58,   95,  104,  114,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   58,   95,  101,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   58,   95,  110,    9,   13,   48,   57,   65,
	   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  117,    9,   13,   48,   57,   65,   90,   97,  122,   32,   58,
	   95,  101,    9,   13,   48,   57,   65,   90,   97,  122,   95,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  104,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  105,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  108,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   58,   95,  101,    9,   13,   48,
	   57,   65,   90,   97,  122,   95,   48,   57,   65,   90,   97,  122,
	    0
	};
}

private static final char _cool_lexer_trans_keys[] = init__cool_lexer_trans_keys_0();


private static byte[] init__cool_lexer_single_lengths_0()
{
	return new byte [] {
	    2,    8,    2,    5,    5,    2,    2,    2,    2,    2,    2,    2,
	    1,    2,   11,   11,    1,    2,    2,   11,    2,    1,    1,    1,
	    1,    1,    1,    1,    1,    4,    3,    3,    1,    3,    3,    3,
	    4,    3,    3,    4,    3,    4,    2,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    3,    4,    3,    3,    3,    4,    3,
	    3,    3,    3,    3,    4,    3,    3,    3,    3,    3,    3,    2,
	    1,   11,   29,    0,    2,    1,    2,    2,    3,    3,    0,    1,
	    0,    0,    0,    1,    1,    0,    0,    0,    0,    0,    2,    0,
	    0,    0,    0,    3,    1,    3,    2,    2,    2,    2,    2,    3,
	    2,    2,    3,    2,    3,    2,    2,    2,    2,    2,    2,    2,
	    2,    2,    2,    2,    3,    2,    2,    2,    3,    2,    2,    2,
	    2,    2,    3,    2,    2,    2,    2,    2,    2,    5,    4,    4,
	    1,    4,    4,    4,    2,    5,    4,    4,    1,    4,    4,    1,
	    5,    4,    4,    4,    1,    1,    6,    1,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    3,
	    5,    4,    4,    4,    1,    5,    4,    3,    5,    4,    4,    3,
	    4,    4,    4,    5,    4,    4,    5,    4,    5,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    5,    4,    4,
	    4,    5,    4,    4,    4,    4,    4,    5,    4,    4,    4,    4,
	    4,    4,    4,    1,    4,    1,    4,    4,    4,    1,    5,    4,
	    4,    1,    4,    4,    1,    4,    4,    4,    4,    1,    0,    0,
	    0
	};
}

private static final byte _cool_lexer_single_lengths[] = init__cool_lexer_single_lengths_0();


private static byte[] init__cool_lexer_range_lengths_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    1,    3,    3,    3,    3,    4,    3,    4,    0,    0,    0,
	    0,    0,    0,    0,    1,    4,    4,    4,    3,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    3,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    3,
	    3,    3,    4,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
	    0,    0,    0,    4,    3,    3,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
	    3,    3,    3,    3,    3,    3,    3,    3,    3,    4,    4,    4,
	    3,    4,    4,    4,    1,    4,    4,    4,    3,    4,    4,    3,
	    4,    4,    4,    4,    3,    3,    4,    3,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    3,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
	    4,    4,    4,    3,    4,    3,    4,    4,    4,    3,    4,    4,
	    4,    3,    4,    4,    3,    4,    4,    4,    4,    3,    0,    0,
	    0
	};
}

private static final byte _cool_lexer_range_lengths[] = init__cool_lexer_range_lengths_0();


private static short[] init__cool_lexer_index_offsets_0()
{
	return new short [] {
	    0,    3,   12,   15,   21,   27,   30,   33,   36,   39,   42,   45,
	   48,   50,   54,   69,   84,   89,   95,  102,  117,  124,  126,  128,
	  130,  132,  134,  136,  138,  141,  150,  158,  166,  171,  179,  187,
	  195,  204,  212,  220,  229,  237,  246,  252,  260,  268,  276,  284,
	  292,  300,  308,  316,  324,  332,  340,  349,  357,  365,  373,  382,
	  390,  398,  406,  414,  422,  431,  439,  447,  455,  463,  471,  479,
	  485,  490,  505,  539,  540,  543,  545,  548,  551,  555,  559,  560,
	  562,  563,  564,  565,  567,  569,  570,  571,  573,  574,  575,  578,
	  579,  580,  581,  582,  590,  595,  602,  608,  614,  620,  626,  632,
	  639,  645,  651,  658,  664,  671,  677,  683,  689,  695,  701,  707,
	  713,  719,  725,  731,  737,  744,  750,  756,  762,  769,  775,  781,
	  787,  793,  799,  806,  812,  818,  824,  830,  836,  842,  852,  861,
	  870,  875,  884,  893,  902,  906,  916,  925,  934,  939,  948,  957,
	  962,  972,  981,  990,  999, 1004, 1009, 1020, 1025, 1034, 1043, 1052,
	 1061, 1070, 1079, 1088, 1097, 1106, 1115, 1124, 1133, 1142, 1151, 1160,
	 1168, 1178, 1187, 1196, 1205, 1210, 1220, 1229, 1237, 1247, 1256, 1265,
	 1273, 1282, 1291, 1300, 1310, 1319, 1328, 1338, 1347, 1357, 1366, 1375,
	 1384, 1393, 1402, 1411, 1420, 1429, 1438, 1447, 1456, 1465, 1475, 1484,
	 1493, 1502, 1512, 1521, 1530, 1539, 1548, 1557, 1567, 1576, 1585, 1594,
	 1603, 1612, 1621, 1630, 1635, 1644, 1649, 1658, 1667, 1676, 1681, 1691,
	 1700, 1709, 1714, 1723, 1732, 1737, 1746, 1755, 1764, 1773, 1778, 1779,
	 1780
	};
}

private static final short _cool_lexer_index_offsets[] = init__cool_lexer_index_offsets_0();


private static short[] init__cool_lexer_indicies_0()
{
	return new short [] {
	    2,    3,    1,    5,    6,    5,    7,    8,    9,   10,   11,    4,
	   13,   14,   12,   15,   16,   15,   13,   14,   12,   17,   18,   17,
	    2,    3,    1,   20,   21,   19,   23,   24,   22,   26,   27,   25,
	   29,   30,   28,   32,   33,   31,   35,   36,   34,   39,   40,   38,
	   37,   41,   42,   43,   42,   37,   44,   46,   47,   48,   49,   50,
	   51,   52,   53,   54,   55,   44,   45,   45,   37,   56,   58,   59,
	   60,   61,   62,   63,   64,   65,   66,   67,   56,   57,   57,   37,
	   68,   68,   68,   68,   37,   68,   69,   68,   68,   68,   37,   70,
	   71,   70,   71,   71,   71,   37,   72,   74,   75,   76,   77,   78,
	   79,   80,   81,   82,   83,   72,   73,   73,   37,   84,   85,   84,
	   85,   85,   85,   37,   86,   37,   87,   37,   88,   37,   89,   37,
	   90,   37,   91,   37,   92,   37,   56,   56,   37,   84,   85,   93,
	   94,   84,   85,   85,   85,   37,   84,   85,   95,   84,   85,   85,
	   85,   37,   84,   85,   96,   84,   85,   85,   85,   37,   85,   85,
	   85,   85,   37,   84,   85,   97,   84,   85,   85,   85,   37,   84,
	   85,   98,   84,   85,   85,   85,   37,   84,   85,   96,   84,   85,
	   85,   85,   37,   84,   85,   93,   99,   84,   85,   85,   85,   37,
	   84,   85,  100,   84,   85,   85,   85,   37,   84,   85,   96,   84,
	   85,   85,   85,   37,   84,   85,  101,   96,   84,   85,   85,   85,
	   37,   84,   85,   93,   84,   85,   85,   85,   37,   84,   85,   96,
	  102,   84,   85,   85,   85,   37,   85,  103,   85,   85,   85,   37,
	   84,   85,  104,   84,   85,   85,   85,   37,   84,   85,  105,   84,
	   85,   85,   85,   37,   84,   85,  106,   84,   85,   85,   85,   37,
	   84,   85,  107,   84,   85,   85,   85,   37,   84,   85,  108,   84,
	   85,   85,   85,   37,   84,   85,  109,   84,   85,   85,   85,   37,
	   84,   85,  110,   84,   85,   85,   85,   37,   84,   85,  111,   84,
	   85,   85,   85,   37,   84,   85,  112,   84,   85,   85,   85,   37,
	   84,   85,  113,   84,   85,   85,   85,   37,   84,   85,   96,   84,
	   85,   85,   85,   37,   84,   85,  114,  115,   84,   85,   85,   85,
	   37,   84,   85,   96,   84,   85,   85,   85,   37,   84,   85,  116,
	   84,   85,   85,   85,   37,   84,   85,   96,   84,   85,   85,   85,
	   37,   84,   85,  117,  114,   84,   85,   85,   85,   37,   84,   85,
	   96,   84,   85,   85,   85,   37,   84,   85,   96,   84,   85,   85,
	   85,   37,   84,   85,  118,   84,   85,   85,   85,   37,   84,   85,
	  119,   84,   85,   85,   85,   37,   84,   85,   96,   84,   85,   85,
	   85,   37,   84,   85,  120,  121,   84,   85,   85,   85,   37,   84,
	   85,  122,   84,   85,   85,   85,   37,   84,   85,   96,   84,   85,
	   85,   85,   37,   84,   85,   95,   84,   85,   85,   85,   37,   84,
	   85,  123,   84,   85,   85,   85,   37,   84,   85,  124,   84,   85,
	   85,   85,   37,   84,   85,   95,   84,   85,   85,   85,   37,   71,
	  125,   71,   71,   71,   37,   71,   71,   71,   71,   37,   71,  127,
	  128,  129,  130,  131,  132,  133,  134,  135,  136,   71,  126,  126,
	   37,  139,  138,  140,  141,  142,  143,  144,  145,  146,  147,  148,
	  150,  151,  152,  153,  154,  156,  157,  158,  159,  160,  161,  162,
	  163,  164,  165,  166,  167,  168,  138,  149,  155,  155,  137,  169,
	   13,   14,   12,  172,  171,   39,  174,   38,  176,  177,  175,   39,
	  138,  174,   38,   39,  173,  174,   38,  178,  180,  179,  181,  182,
	  183,  185,  184,  186,   41,  187,  188,  190,  189,  191,  192,  194,
	  195,  193,  196,  197,  198,  199,  201,  202,   71,  201,   71,   71,
	   71,  200,   68,   68,   68,   68,  203,   68,  204,  205,   68,   68,
	   68,  203,   68,  206,   68,   68,   68,  203,   68,  207,   68,   68,
	   68,  203,   68,  208,   68,   68,   68,  203,   68,  209,   68,   68,
	   68,  203,   68,  207,   68,   68,   68,  203,   68,  204,  210,   68,
	   68,   68,  203,   68,  211,   68,   68,   68,  203,   68,  207,   68,
	   68,   68,  203,   68,  212,  207,   68,   68,   68,  203,   68,  204,
	   68,   68,   68,  203,   68,  207,  213,   68,   68,   68,  203,   68,
	  214,   68,   68,   68,  203,   68,  215,   68,   68,   68,  203,   68,
	  216,   68,   68,   68,  203,   68,  217,   68,   68,   68,  203,   68,
	  218,   68,   68,   68,  203,   68,  219,   68,   68,   68,  203,   68,
	  220,   68,   68,   68,  203,   68,  221,   68,   68,   68,  203,   68,
	  222,   68,   68,   68,  203,   68,  223,   68,   68,   68,  203,   68,
	  207,   68,   68,   68,  203,   68,  224,  225,   68,   68,   68,  203,
	   68,  207,   68,   68,   68,  203,   68,  226,   68,   68,   68,  203,
	   68,  207,   68,   68,   68,  203,   68,  227,  224,   68,   68,   68,
	  203,   68,  207,   68,   68,   68,  203,   68,  207,   68,   68,   68,
	  203,   68,  228,   68,   68,   68,  203,   68,  229,   68,   68,   68,
	  203,   68,  207,   68,   68,   68,  203,   68,  230,  231,   68,   68,
	   68,  203,   68,  232,   68,   68,   68,  203,   68,  207,   68,   68,
	   68,  203,   68,  206,   68,   68,   68,  203,   68,  233,   68,   68,
	   68,  203,   68,  234,   68,   68,   68,  203,   68,  206,   68,   68,
	   68,  203,  201,  202,   71,  235,  236,  201,   71,   71,   71,  200,
	  201,  202,   71,  237,  201,   71,   71,   71,  200,  201,  202,   71,
	  238,  201,   71,   71,   71,  200,   71,   71,   71,   71,  239,  201,
	  202,   71,  240,  201,   71,   71,   71,  200,  201,  202,   71,  241,
	  201,   71,   71,   71,  200,  201,  202,   71,  242,  201,   71,   71,
	   71,  200,  243,  244,  243,  186,  201,  202,   71,  245,  246,  201,
	   71,   71,   71,  200,  201,  202,   71,  247,  201,   71,   71,   71,
	  200,  201,  202,   71,  248,  201,   71,   71,   71,  200,   71,   71,
	   71,   71,  249,  201,  202,   71,  250,  201,   71,   71,   71,  200,
	  201,  202,   71,  251,  201,   71,   71,   71,  200,   71,   71,   71,
	   71,  252,  201,  202,   71,  253,  254,  201,   71,   71,   71,  200,
	  201,  202,   71,  255,  201,   71,   71,   71,  200,  201,  202,   71,
	  256,  201,   71,   71,   71,  200,  201,  202,   71,  257,  201,   71,
	   71,   71,  200,   71,   71,   71,   71,  258,   71,   71,   71,   71,
	  259,  201,  202,   71,  260,  261,  262,  201,   71,   71,   71,  200,
	   71,   71,   71,   71,  263,  201,  202,   71,  264,  201,   71,   71,
	   71,  200,  201,  202,   71,  265,  201,   71,   71,   71,  200,  201,
	  202,   71,  266,  201,   71,   71,   71,  200,  201,  202,   71,  267,
	  201,   71,   71,   71,  200,  201,  202,   71,  268,  201,   71,   71,
	   71,  200,  201,  202,   71,  269,  201,   71,   71,   71,  200,  201,
	  202,   71,  270,  201,   71,   71,   71,  200,  201,  202,   71,  271,
	  201,   71,   71,   71,  200,  201,  202,   71,  272,  201,   71,   71,
	   71,  200,  201,  202,   71,  273,  201,   71,   71,   71,  200,  201,
	  202,   71,  274,  201,   71,   71,   71,  200,  201,  202,   71,  275,
	  201,   71,   71,   71,  200,  201,  202,   71,  276,  201,   71,   71,
	   71,  200,  201,  202,   71,  277,  201,   71,   71,   71,  200,  201,
	  202,   71,  278,  201,   71,   71,   71,  200,  201,  202,   71,  201,
	   71,   71,   71,  279,  201,  202,   71,  280,  281,  201,   71,   71,
	   71,  200,  201,  202,   71,  274,  201,   71,   71,   71,  200,  201,
	  202,   71,  282,  201,   71,   71,   71,  200,  201,  202,   71,  283,
	  201,   71,   71,   71,  200,   71,   71,   71,   71,  284,  201,  202,
	   71,  285,  286,  201,   71,   71,   71,  200,  201,  202,   71,  287,
	  201,   71,   71,   71,  200,  201,  202,  289,  201,  289,  289,  289,
	  288,  201,  202,  289,  290,  291,  201,  289,  289,  289,  288,  201,
	  202,  289,  292,  201,  289,  289,  289,  288,  201,  202,  289,  293,
	  201,  289,  289,  289,  288,  201,  202,  289,  201,  289,  289,  289,
	  200,  201,  202,  289,  294,  201,  289,  289,  289,  288,  201,  202,
	  289,  295,  201,  289,  289,  289,  288,  201,  202,  289,  293,  201,
	  289,  289,  289,  288,  201,  202,  289,  290,  296,  201,  289,  289,
	  289,  288,  201,  202,  289,  297,  201,  289,  289,  289,  288,  201,
	  202,  289,  293,  201,  289,  289,  289,  288,  201,  202,  289,  298,
	  293,  201,  289,  289,  289,  288,  201,  202,  289,  290,  201,  289,
	  289,  289,  288,  201,  202,  289,  293,  299,  201,  289,  289,  289,
	  288,  201,  202,  289,  300,  201,  289,  289,  289,  200,  201,  202,
	  289,  301,  201,  289,  289,  289,  288,  201,  202,  289,  302,  201,
	  289,  289,  289,  288,  201,  202,  289,  303,  201,  289,  289,  289,
	  288,  201,  202,  289,  304,  201,  289,  289,  289,  288,  201,  202,
	  289,  305,  201,  289,  289,  289,  288,  201,  202,  289,  306,  201,
	  289,  289,  289,  288,  201,  202,  289,  307,  201,  289,  289,  289,
	  288,  201,  202,  289,  308,  201,  289,  289,  289,  288,  201,  202,
	  289,  309,  201,  289,  289,  289,  288,  201,  202,  289,  310,  201,
	  289,  289,  289,  288,  201,  202,  289,  293,  201,  289,  289,  289,
	  288,  201,  202,  289,  311,  312,  201,  289,  289,  289,  288,  201,
	  202,  289,  293,  201,  289,  289,  289,  288,  201,  202,  289,  313,
	  201,  289,  289,  289,  288,  201,  202,  289,  293,  201,  289,  289,
	  289,  288,  201,  202,  289,  314,  311,  201,  289,  289,  289,  288,
	  201,  202,  289,  293,  201,  289,  289,  289,  288,  201,  202,  289,
	  293,  201,  289,  289,  289,  288,  201,  202,  289,  315,  201,  289,
	  289,  289,  288,  201,  202,  289,  316,  201,  289,  289,  289,  288,
	  201,  202,  289,  293,  201,  289,  289,  289,  288,  201,  202,  289,
	  317,  318,  201,  289,  289,  289,  288,  201,  202,  289,  319,  201,
	  289,  289,  289,  288,  201,  202,  289,  293,  201,  289,  289,  289,
	  288,  201,  202,  289,  292,  201,  289,  289,  289,  288,  201,  202,
	  289,  320,  201,  289,  289,  289,  288,  201,  202,  289,  321,  201,
	  289,  289,  289,  288,  201,  202,  289,  292,  201,  289,  289,  289,
	  288,  201,  202,   71,  322,  201,   71,   71,   71,  200,   71,   71,
	   71,   71,  323,  201,  202,   71,  324,  201,   71,   71,   71,  200,
	   71,   71,   71,   71,  325,  201,  202,   71,  326,  201,   71,   71,
	   71,  200,  201,  202,   71,  327,  201,   71,   71,   71,  200,  201,
	  202,   71,  328,  201,   71,   71,   71,  200,   71,   71,   71,   71,
	  329,  201,  202,   71,  330,  331,  201,   71,   71,   71,  200,  201,
	  202,   71,  332,  201,   71,   71,   71,  200,  201,  202,   71,  333,
	  201,   71,   71,   71,  200,   71,   71,   71,   71,  334,  201,  202,
	   71,  335,  201,   71,   71,   71,  200,  201,  202,   71,  336,  201,
	   71,   71,   71,  200,   71,   71,   71,   71,  186,  201,  202,   71,
	  337,  201,   71,   71,   71,  200,  201,  202,   71,  338,  201,   71,
	   71,   71,  200,  201,  202,   71,  339,  201,   71,   71,   71,  200,
	  201,  202,   71,  340,  201,   71,   71,   71,  200,   71,   71,   71,
	   71,  341,  342,  343,  344,    0
	};
}

private static final short _cool_lexer_indicies[] = init__cool_lexer_indicies_0();


private static short[] init__cool_lexer_trans_targs_0()
{
	return new short [] {
	   74,    0,   74,    1,    2,    3,    5,    6,    7,    8,    9,   10,
	    0,   74,    1,    4,    5,    4,    5,    0,   74,    1,    0,   74,
	    1,    0,   74,    1,    0,   74,    1,    0,   74,    1,    0,   74,
	    1,   74,   78,   79,   81,   88,   13,   14,   15,  100,  101,  107,
	  110,  112,  124,  128,  130,  131,  134,  138,   15,  100,  101,  107,
	  110,  112,  124,  128,  130,  131,  134,  138,  100,  113,   19,   99,
	   19,   20,   29,   36,   39,   41,   54,   58,   60,   61,   64,   68,
	  148,   20,   22,   23,   24,   25,   26,   27,   28,   30,   33,   31,
	   32,   34,   35,   37,   38,   40,   42,   43,   44,   45,   46,   47,
	   48,   49,   50,   51,   52,   53,   55,   56,   57,   59,   62,   63,
	   65,   67,   66,   69,   70,  164,  187,  188,  195,  198,  200,  213,
	  217,  219,  220,  223,  227,   74,   74,   75,   76,   77,   82,   83,
	   85,   86,   87,   89,   90,   91,   92,   93,   94,   97,   98,   99,
	  141,  149,  156,  162,  180,  185,  232,  234,  238,  245,  250,  251,
	  252,   74,   74,   74,   11,   74,   80,   78,   79,   80,   74,   74,
	   84,   74,   74,   74,   74,   12,   74,   74,   74,   74,   91,   74,
	   74,   74,   95,   96,   74,   74,   74,   74,   74,   13,   14,   74,
	  102,  104,  103,   16,  105,  106,  108,  109,  111,   17,  114,  115,
	  116,  117,  118,  119,  120,  121,  122,  123,  125,  126,  127,  129,
	  132,  133,  135,  137,  136,  139,  140,  142,  145,  143,  144,   74,
	  146,  147,   18,  148,   21,  150,  153,  151,  152,   74,  154,  155,
	   74,  157,  161,  158,  159,  160,   74,   74,  163,   71,  175,   74,
	  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,   72,  176,
	  177,  178,  179,   74,  181,  182,  183,  184,   74,  186,  230,   73,
	   74,  187,  189,  192,  190,  191,  193,  194,  196,  197,  199,  201,
	  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  214,
	  215,  216,  218,  221,  222,  224,  226,  225,  228,  229,  231,   74,
	  233,   74,  235,  236,  237,   74,  239,  242,  240,  241,   74,  243,
	  244,  246,  247,  248,  249,   74,   74,   74,   74
	};
}

private static final short _cool_lexer_trans_targs[] = init__cool_lexer_trans_targs_0();


private static short[] init__cool_lexer_trans_actions_0()
{
	return new short [] {
	   33,    9,  170,   11,   13,   13,   13,    0,    0,    0,    0,    0,
	  140,  218,  143,  140,  140,    9,    9,  223,  273,  228,  206,  267,
	  210,  174,  243,  178,  198,  261,  202,  190,  255,  194,  182,  249,
	  186,   31,    0,    0,    0,    0,    0,    0,    7,  166,  166,  166,
	  238,  238,  166,  166,  238,  166,  166,  166,    0,  140,  140,  140,
	  214,  214,  140,  140,  214,  140,  140,  140,    9,    9,    1,  152,
	    0,  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
	  149,    9,    0,    0,    0,    0,    0,    0,    3,    9,    9,    9,
	    0,    9,    9,    9,    9,    9,    0,    9,    9,    9,    9,    9,
	    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
	    9,    9,    9,    9,    9,  152,  233,  233,  233,  233,  233,  233,
	  233,  233,  233,  233,  233,   25,   23,    0,  155,   21,    0,    0,
	    0,    0,   21,    0,    0,  140,    0,    0,    0,    0,    0,  214,
	  214,  214,  214,  214,  214,  214,  214,  214,  214,  214,    0,    0,
	    0,  146,   29,   86,    0,  134,    0,   15,   15,   15,   89,   80,
	    0,  137,   74,  122,   77,    0,   27,  119,   83,  128,    9,  113,
	  116,   98,    0,    0,   71,  101,   95,  125,   68,    5,    5,   65,
	    9,    9,  152,    0,    9,  152,    9,  152,    9,    0,    9,    9,
	    9,    9,    9,    9,    9,    9,    9,  152,  152,    9,  152,  152,
	    9,  152,    9,    9,  152,    9,    9,  152,  152,  152,    0,   47,
	  152,  152,    0,   21,    0,  152,  152,  152,    0,   41,  152,    0,
	   53,  152,    0,  152,  152,    0,  131,   44,    0,    0,  152,   35,
	  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,    0,  152,
	  152,  152,  152,  158,  152,  152,  152,    0,   59,  152,  152,    0,
	  162,  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
	  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
	  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,    0,   92,
	    0,   50,  152,  152,    0,   62,  152,  152,  152,    0,   38,  152,
	    0,  152,  152,  152,    0,   56,  107,  110,  104
	};
}

private static final short _cool_lexer_trans_actions[] = init__cool_lexer_trans_actions_0();


private static short[] init__cool_lexer_to_state_actions_0()
{
	return new short [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0
	};
}

private static final short _cool_lexer_to_state_actions[] = init__cool_lexer_to_state_actions_0();


private static short[] init__cool_lexer_from_state_actions_0()
{
	return new short [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,   19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0
	};
}

private static final short _cool_lexer_from_state_actions[] = init__cool_lexer_from_state_actions_0();


private static short[] init__cool_lexer_eof_trans_0()
{
	return new short [] {
	    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
	   38,   38,    0,  170,  171,  172,  174,  174,  174,  174,  179,  180,
	  182,  183,  184,  185,  187,  188,  189,  190,  192,  193,  194,  197,
	  198,  199,  200,  201,  204,  204,  204,  204,  204,  204,  204,  204,
	  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
	  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
	  204,  204,  204,  204,  204,  204,  204,  204,  204,  201,  201,  201,
	  240,  201,  201,  201,  187,  201,  201,  201,  250,  201,  201,  253,
	  201,  201,  201,  201,  259,  260,  201,  264,  201,  201,  201,  201,
	  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,  201,  280,
	  201,  201,  201,  201,  285,  201,  201,  289,  289,  289,  289,  201,
	  289,  289,  289,  289,  289,  289,  289,  289,  289,  201,  289,  289,
	  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
	  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
	  289,  289,  201,  324,  201,  326,  201,  201,  201,  330,  201,  201,
	  201,  335,  201,  201,  187,  201,  201,  201,  201,  342,  343,  344,
	  345
	};
}

private static final short _cool_lexer_eof_trans[] = init__cool_lexer_eof_trans_0();


static final int cool_lexer_start = 74;
static final int cool_lexer_first_final = 74;
static final int cool_lexer_error = -1;

static final int cool_lexer_en_main = 74;


// line 320 "cool.rl"
}
